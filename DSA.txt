Flowchart: graphical way of representing a problem 
    Pseudocode: general way of representing a code 

    component of Flowchart:
        -Start/end
        -input/output
        -process
        -condition
        -Flow
        
    q.draw a flowchart to print sum of two number 
    --> read a and b
    --> sum=a+b
    --> print sum

    q.draw a flowchart to find avg of two number
    --> read a and b
    --> avg=(a+b)/2
    --> print avg

    q.draw a flowchart to find simple interest
    --> read p,r,t
    --> si=(p*r*t)/100
    --> print si

    q.draw a flowchart to find greater of two number 
    --> read a,b
    --> if(a>b) print a is greater 
    --> else print b is greater 

    q.draw a flowchart to find greater of three number 
    --> read a ,b,c 
    --> if (a>b & a>c) print a is greater 
    --> else if (b>a & b>c) print b is greater 
    --> else if (c>a & c>b) print c is greater 

    q.draw a flowchart to find weather a number is odd or even
    --> read n
    --> if(n%2==0) print number is even
    --> else print number is odd 

    q.draw a flowchart weather a number is positive negetive or 0
    --> read n
    --> if(n<0) print number is negetive 
    --> else if(n>0) print number is positive 
    --> else print number is zero 

    q.draw a flowchart to check weather a triangle given is valid or not

Loop: repeat a block until condition is false 

    q.draw a flowchart to print hello carry 5 times
    q.draw a flowchart to print number from 1 to 10 
    q.draw a flowchart to print all even number from 1-100
    q.draw a flowchart to print all odd number from 1-100
    q.draw a flowchart to print sum of numbers from 1 to n
    q.draw a flowchart to find factorial of n
    q.draw a flowchart to find weather a number is prime number or not

programming language : used to convert out pseudocode into machine executable code

    program--> compiler --> binary 

    it has some rules and regulations to be followed during writing a code in programming language 

    c++

    wap to print hello carry 

--datatypes :
    int - integer 
    int a=5;//4 byte

    char - character 
    char ch ='a';//1 byte

    bool - boolean 
    bool b=1;//1 byte
    true- 1
    falese- 0

    float -floating 
    float f=3.6//8 byte

    double d=1.23 //8 byte 

    unsigned a=12 //only positive value

    //how it is stored in memory

variable name : it should be an valid identifier 

typecasting: to convert one datatype to other
    implicit 
    explicit
    // how it is typecasted

comments:
    single line : //
    multi line : /* */

//how to store negetive number 
    --ignore the negentive sign
    --convert into binary
    --find 2s complement
    --store 

//how to print negetive number 
    --find 2s complement
    --convert to decimal
    --print

why?
    to save two representation of 0

--> cin & cin.get()

operator : 

    arithmatic + - / * %
    int/int --> int
    float/int --> float
    double/int --> double

    logical && || !

    assignment =

    relational != == < > <= >=

    bitwise 

    ternary ?:

conditional statement :
    if
    if-else
    if-else if-else
    nested if
    q.wap to identify weather input character is lowercase or upercase or numeric
    Conditional Statements :
    1.if
    2.else
    3.else if 
    4.Switch

    if else Statements:
        Syntax:
            if{
                Statement 1;
                Statement 2;
            }
            else{
                Statement 1;
                Statement 2;
            }

        Q. wap to check whether user is eligible to vote or not 

        Q. wap to check whether a number is even or odd

    Else if Statements:
        Syntax:
            if{
                Statement 1;
                Statement 2;
            }
            else if{
                Statement 1;
                Statement 2;
            }
            .
            .
            .
            .
            else {
                Statement 1;
                Statement 2;
            }
        
        Q.wap to check whether two numbers are less than or greater than or equal to each other


        Q. Write a Java program to assign grades based on marks.
             Example: marks >= 90 -> A, 
                marks >= 80 -> B, 
                marks >= 70 -> C, 
                marks >= 60 -> D, 
                else -> F

        Q.wap to find gratest among 3 numbers 

        Q.wap to find gratest among 4 numbers

        Q.wap to find gratest among 5 numbers  

Loops:
    for
    while
    do while
    q.wap to input a number and print number upto that number 
    q.wap to input a number and print sum of number upto that number 
    q.wap to input a number and print sum of even number upto that number 
    q.wap to input a number and print sum of odd number upto that number 
    q.wap to input a number and print prime number upto that number
    q.fahrenheit to celcius
    q.wap to print its table 

pattern 
    basic pattern:
    1 2 3 4
    1 2 3 4
    1 2 3 4
    1 2 3 4

    1
    22
    333
    4444
    55555

    1
    23
    456
    78910

    1
    12
    123
    1234
    12345

    1
    21
    321
    4321

    1 2 3
    2 3 4
    4 5 6

    A A A
    B B B
    C C C

    A B C
    A B C
    A B C

    A B C
    D E F
    G H I

    A B C
    B C D 
    D E F

    A
    BB
    CCC
    DDDD

    A
    BC
    CDE
    EFGH
    
    1. Solid rectangle :

    * * * * *
    * * * * *
    * * * * *
    * * * * *
    2. Hollow rectangle

    * * * * *
    *       *
    *       *
    * * * * *
    3. Half pyramid

    *
    * *
    * * *
    * * * *
    * * * * *
    4. Inverted half pyramid

    * * * *
    * * *
    * *
    *
    5. Inverted half pyramid rotated by 180 degree

        *
       **
      ***
     ****
    *****
    6. Half pyramid with numbers

    1 
    1 2
    1 2 3
    1 2 3 4
    1 2 3 4 5
    7.Inverted half pyramid with number

    1 2 3 4 5
    1 2 3 4
    1 2 3
    1 2
    1
    8. Floyd's triangle

    1
    2 3
    4 5 6
    7 8 9 10
    11 12 13 14 15
    9. 0-1 triangle

    1
    0 1
    1 0 1
    0 1 0 1
    1 0 1 0 1
    10. Butterfly Pattern

    *             *
    * *         * *
    * * *     * * *
    * * * * * * * *
    * * * * * * * *
    * * *     * * *
    * *         * *
    *             *

    *             *
    * *         * *
    * * *     * * *
    * * * * * * * *
    * * *     * * *
    * *         * *
    *             *
    11. Solid rhombus

        * * * * *
       * * * * *
      * * * * *
     * * * * *
    * * * * *
    12. Number pyramid

        1
       2 2
      3 3 3
     4 4 4 4
    5 5 5 5 5
    13. Palindrome Pattern

        1
       212
      32123
     4321234
    543212345
    14. Diamond Pattern

        *
       ***
      *****
     *******
    *********
     *******
      *****
       ***
        *
    